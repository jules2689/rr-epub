# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gepub` gem.
# Please instead update this file by running `bin/tapioca gem gepub`.


# source://gepub//lib/gepub/meta_array.rb#1
class Array
  include ::Enumerable

  # source://gepub//lib/gepub/meta_array.rb#2
  def sort_as_meta; end
end

# this file is automatically generated by tools/generate_function.rb . do not edit this code directly.
#
# source://gepub//lib/gepub/version.rb#1
module GEPUB; end

# source://gepub//lib/gepub/bindings.rb#4
class GEPUB::Bindings
  include ::GEPUB::XMLUtil
  include ::GEPUB::InspectMixin

  # @return [Bindings] a new instance of Bindings
  # @yield [_self]
  # @yieldparam _self [GEPUB::Bindings] the object that the method was called on
  #
  # source://gepub//lib/gepub/bindings.rb#19
  def initialize; end

  # source://gepub//lib/gepub/bindings.rb#51
  def add(id, media_type); end

  # source://gepub//lib/gepub/bindings.rb#47
  def handler_by_media_type; end

  # source://gepub//lib/gepub/bindings.rb#43
  def media_types; end

  # source://gepub//lib/gepub/bindings.rb#56
  def to_xml(builder); end

  class << self
    # source://gepub//lib/gepub/bindings.rb#25
    def parse(bindings_xml); end
  end
end

# source://gepub//lib/gepub/bindings.rb#8
class GEPUB::Bindings::MediaType
  # @return [MediaType] a new instance of MediaType
  #
  # source://gepub//lib/gepub/bindings.rb#10
  def initialize(handler, media_type); end

  # Returns the value of attribute handler.
  #
  # source://gepub//lib/gepub/bindings.rb#9
  def handler; end

  # Sets the attribute handler
  #
  # @param value the value to set the attribute handler to.
  #
  # source://gepub//lib/gepub/bindings.rb#9
  def handler=(_arg0); end

  # Returns the value of attribute media_type.
  #
  # source://gepub//lib/gepub/bindings.rb#9
  def media_type; end

  # Sets the attribute media_type
  #
  # @param value the value to set the attribute media_type to.
  #
  # source://gepub//lib/gepub/bindings.rb#9
  def media_type=(_arg0); end

  # source://gepub//lib/gepub/bindings.rb#14
  def to_xml(builder); end
end

# Book is the class to hold data in EPUB files.
#
# It can generate and parse EPUB2/EPUB3 files.
#
# Book delegates many methods to objects in other class, so you can't find
# them in Book#methods or in ri/rdoc documentation. Their descriptions are below.
#
# == \Package Attributes
# === Book#version (delegated to Package#version)
# returns OPF version.
# === Book#version=, Book#set_version (delegated to Package#version=)
# set OPF version
# === Book#unique_identifier (delegated to Package#unique_identifier)
# return unique_identifier ID value. identifier itself can be get by Book#identifier
# == \Metadata
# \Metadata items(e.g. title, creator, publisher, etc) are GEPUB::Meta objects.
# === Book#identifier (delegated to Package#identifier)
# return GEPUB::Meta object of unique identifier.
# === Book#identifier=(identifier)   (delegated to Package#identifier=)
# set identifier (i.e. url, uuid, ISBN) as unique-identifier of EPUB.
# === Book#set_main_id(identifier, id = nil, type = nil)   (delegated to Package#set_main_id)
# same as identifier=, but can specify id (in the opf xml) and identifier type(i.e. URL, uuid, ISBN, etc)
# === Book#add_identifier(string, id, type=nil) (delegated to Metadata#add_identifier)
# Set an identifier metadata. It it not unique-identifier in opf. Many EPUB files do not set identifier other than unique-identifier.
# === Book#add_title(content, id: nil, title_type: nil) (delegated to Metadata#add_title)
# add title metadata. title_type candidates is defined in TITLE_TYPES.
# === Book#title(content, id = nil, title_type = nil) (delegated to Metadata#title)
# clear all titles and then add title.
# === Book#title (delegated to Metadata)
# returns 'main' title Meta object. 'main' title is determined by this order:
# 1. title-type is  'main'
# 2. display-seq is smallest
# 3. appears first in opf file
# === Book#title_list (delegated to Metadata)
# returns titles list by display-seq or defined order.
# the title without display-seq is appear after titles with display-seq.
# === Book#add_creator(content, id = nil, role = 'aut') (delegated to Metadata#add_creator)
# add creator.
# === Book#creator
# returns 'main' creator Meta object. 'main' creator is determined as following:
# 1. display-seq is smallest
# 2. appears first in opf file
# === Book#creator_list (delegated to Metadata)
# returns creators list by display-seq or defined order.
# the creators without display-seq is appear after creators with display-seq.
# === Book#add_contributor(content, id = nil, role = 'aut') (delegated to Metadata#add_contributor)
# add contributor.
# === Book#contributor(content, id = nil, role = 'aut') (delegated to Metadata#contributor)
# returns 'main' contributor. 'main' contributor determined as following:
# 1. display-seq is smallest
# 2. appears first in opf file
# === Book#contributors_list (delegated to Metadata)
# returns contributors list by display-seq or defined order.
# the contributors without display-seq is appear after contributors with display-seq.
# === Book#lastmodified(date) (delegated to Metadata#lastmodified)
# set last modified date. date is a Time, DateTime or string that can be parsed by DateTime#parse.
# === Book#modified_now (delegated to Metadata#modified_now)
# set last modified date to current time.
# === Book#lastmodified (delegated to Metadata#lastmodified)
# returns Meta object contains last modified time.
# === setting and reading other metadata: publisher, language, coverage, date, description, format, relation, rights, source, subject, type (delegated to Metadata)
# they all have methods like: publisher(which returns 'main' publisher), add_publisher(content, id) (which add publisher), publisher= (clears and set publisher), and publisher_list(returns publisher Meta object in display-seq order).
# === Book#page_progression_direction= (delegated to Spine#page_progression_direction=)
# set page-proression-direction attribute to spine.
#
# source://gepub//lib/gepub/book.rb#81
class GEPUB::Book
  include ::GEPUB::InspectMixin

  # creates new empty Book object.
  # usually you do not need to specify any arguments.
  #
  # @return [Book] a new instance of Book
  #
  # source://gepub//lib/gepub/book.rb#118
  def initialize(path = T.unsafe(nil), attributes = T.unsafe(nil), &block); end

  # add an item(i.e. html, images, audios, etc)  to Book.
  # the added item will be referenced by the first argument in the EPUB container.
  #
  # source://gepub//lib/gepub/book_add_item.rb#7
  def add_item(href, deprecated_content = T.unsafe(nil), deprecated_id = T.unsafe(nil), deprecated_attributes = T.unsafe(nil), content: T.unsafe(nil), id: T.unsafe(nil), media_type: T.unsafe(nil), fallback: T.unsafe(nil), properties: T.unsafe(nil), media_overlay: T.unsafe(nil), toc_text: T.unsafe(nil), property: T.unsafe(nil), attributes: T.unsafe(nil)); end

  # Add an optional file to the container
  #
  # source://gepub//lib/gepub/book.rb#137
  def add_optional_file(path, io_or_filename); end

  # same as add_item, but the item will be added to spine of the EPUB.
  #
  # source://gepub//lib/gepub/book_add_item.rb#15
  def add_ordered_item(href, deprecated_content = T.unsafe(nil), deprecated_id = T.unsafe(nil), deprecated_attributes = T.unsafe(nil), content: T.unsafe(nil), id: T.unsafe(nil), media_type: T.unsafe(nil), fallback: T.unsafe(nil), properties: T.unsafe(nil), media_overlay: T.unsafe(nil), toc_text: T.unsafe(nil), property: T.unsafe(nil), attributes: T.unsafe(nil)); end

  # add tocdata like this : [ {link: chapter1.xhtml, text: 'Capter 1', level: 1} ] .
  # if item corresponding to the link does not exists, error will be thrown.
  #
  # source://gepub//lib/gepub/book.rb#254
  def add_tocdata(toc_yaml); end

  # clenup and maintain consistency of metadata and items included in the Book
  # object.
  #
  # source://gepub//lib/gepub/book.rb#181
  def cleanup; end

  # source://gepub//lib/gepub/book.rb#240
  def container_xml; end

  # writes EPUB to file. if file exists, it will be overwritten.
  #
  # source://gepub//lib/gepub/book.rb#231
  def generate_epub(path_to_epub); end

  # generates and returns StringIO contains EPUB.
  #
  # source://gepub//lib/gepub/book.rb#222
  def generate_epub_stream; end

  # source://gepub//lib/gepub/book.rb#265
  def generate_nav_doc(title = T.unsafe(nil)); end

  # get handler item which defined in bindings for media type,
  #
  # source://gepub//lib/gepub/book.rb#165
  def get_handler_of(media_type); end

  # source://gepub//lib/gepub/book.rb#169
  def method_missing(name, *args, **_arg2, &block); end

  # source://gepub//lib/gepub/book.rb#269
  def nav_doc(title = T.unsafe(nil)); end

  # source://gepub//lib/gepub/book.rb#346
  def ncx_xml; end

  # Get optional(not required in EPUB specification) files in the container.
  #
  # source://gepub//lib/gepub/book.rb#132
  def optional_files; end

  # should call ordered() with block.
  # within the block, all item added by add_item will be added to spine also.
  #
  # source://gepub//lib/gepub/book.rb#175
  def ordered(&block); end

  # source://gepub//lib/gepub/book.rb#146
  def set_singleton_methods_to_item(item); end

  # write EPUB to stream specified by the argument.
  #
  # source://gepub//lib/gepub/book.rb#187
  def write_to_epub_container(epub); end

  private

  # source://gepub//lib/gepub/book.rb#463
  def add_item_internal(href, item_attributes:, ordered:, content: T.unsafe(nil), attributes: T.unsafe(nil)); end

  # source://gepub//lib/gepub/book.rb#430
  def cleanup_for_epub2; end

  # source://gepub//lib/gepub/book.rb#443
  def cleanup_for_epub3; end

  # source://gepub//lib/gepub/book.rb#486
  def handle_deprecated_add_item_arguments(deprecated_content, deprecated_id, deprecated_attributes, content, id, attributes); end

  class << self
    # Parses existing EPUB2/EPUB3 files from an IO object or a file path and creates new Book object.
    #   book = self.parse(File.new('some.epub'))
    #
    # source://gepub//lib/gepub/book.rb#100
    def parse(path_or_io); end

    # source://gepub//lib/gepub/book.rb#90
    def rootfile_from_container(rootfile); end

    private

    # source://gepub//lib/gepub/book.rb#407
    def check_consistency_of_package(package, package_path); end

    # source://gepub//lib/gepub/book.rb#382
    def parse_container(zip_file, files); end

    # source://gepub//lib/gepub/book.rb#418
    def parse_files_into_package(files, package); end
  end
end

# source://gepub//lib/gepub/book.rb#86
GEPUB::Book::CONTAINER = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/book.rb#88
GEPUB::Book::CONTAINER_NS = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/book.rb#84
GEPUB::Book::MIMETYPE = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/book.rb#85
GEPUB::Book::MIMETYPE_CONTENTS = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/book.rb#87
GEPUB::Book::ROOTFILE_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://gepub//lib/gepub/builder.rb#152
class GEPUB::Builder
  include ::GEPUB::BuilderMixin

  # @return [Builder] a new instance of Builder
  #
  # source://gepub//lib/gepub/builder.rb#184
  def initialize(_attributes = T.unsafe(nil), &block); end

  # source://gepub//lib/gepub/builder.rb#257
  def alts(alt_vals = T.unsafe(nil)); end

  # source://gepub//lib/gepub/builder.rb#305
  def book; end

  # source://gepub//lib/gepub/builder.rb#217
  def collection(val, count = T.unsafe(nil)); end

  # source://gepub//lib/gepub/builder.rb#265
  def contributor(val, role = T.unsafe(nil)); end

  # source://gepub//lib/gepub/builder.rb#236
  def contributors(*vals); end

  # source://gepub//lib/gepub/builder.rb#196
  def coverage(val); end

  # source://gepub//lib/gepub/builder.rb#222
  def creator(val, role = T.unsafe(nil)); end

  # source://gepub//lib/gepub/builder.rb#226
  def creators(*vals); end

  # source://gepub//lib/gepub/builder.rb#196
  def date(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def description(val); end

  # source://gepub//lib/gepub/builder.rb#213
  def edition(val); end

  # source://gepub//lib/gepub/builder.rb#213
  def expanded_title(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def format(val); end

  # source://gepub//lib/gepub/builder.rb#298
  def generate_epub(path_to_epub); end

  # source://gepub//lib/gepub/builder.rb#308
  def generate_epub_stream; end

  # specify scroll axis for ibooks
  #
  # source://gepub//lib/gepub/builder.rb#279
  def ibooks_scroll_axis(val); end

  # specify version for ibooks
  #
  # source://gepub//lib/gepub/builder.rb#275
  def ibooks_version(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def identifier(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def language(val); end

  # set optional file.
  # val should be String or Hash.
  # if val is String, file is read from the File specified by string and stored in EPUB to the path specified by string.
  # if val is Hash, file is read from the value and stored in EPUB to the path specified by the key.
  #
  # source://gepub//lib/gepub/builder.rb#287
  def optional_file(val); end

  # set page progression direction.
  #
  # source://gepub//lib/gepub/builder.rb#270
  def page_progression_direction(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def publisher(val); end

  # source://gepub//lib/gepub/builder.rb#246
  def publishers(*vals); end

  # source://gepub//lib/gepub/builder.rb#196
  def relation(val); end

  # source://gepub//lib/gepub/builder.rb#302
  def resources(attributes = T.unsafe(nil), &block); end

  # source://gepub//lib/gepub/builder.rb#196
  def rights(val); end

  # source://gepub//lib/gepub/builder.rb#213
  def short_title(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def source(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def subject(val); end

  # source://gepub//lib/gepub/builder.rb#213
  def subtitle(val); end

  # source://gepub//lib/gepub/builder.rb#213
  def title(val); end

  # source://gepub//lib/gepub/builder.rb#196
  def type(val); end

  # source://gepub//lib/gepub/builder.rb#253
  def unique_identifier(val, id = T.unsafe(nil), scheme = T.unsafe(nil)); end
end

# source://gepub//lib/gepub/builder.rb#154
class GEPUB::Builder::MetaItem
  # @return [MetaItem] a new instance of MetaItem
  #
  # source://gepub//lib/gepub/builder.rb#155
  def initialize(item); end

  # source://gepub//lib/gepub/builder.rb#163
  def alt(alternates = T.unsafe(nil)); end

  # source://gepub//lib/gepub/builder.rb#159
  def apply_one_to_multi; end

  # source://gepub//lib/gepub/builder.rb#167
  def file_as(name); end

  # source://gepub//lib/gepub/builder.rb#175
  def group_position(num); end

  # source://gepub//lib/gepub/builder.rb#179
  def id(val); end

  # source://gepub//lib/gepub/builder.rb#171
  def seq(num); end
end

# source://gepub//lib/gepub/builder_mixin.rb#2
module GEPUB::BuilderMixin
  # source://gepub//lib/gepub/builder_mixin.rb#3
  def method_missing(name, *args, &block); end
end

# source://gepub//lib/gepub/dsl_util.rb#2
module GEPUB::DSLUtil
  private

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/dsl_util.rb#6
  def unassigned?(value); end
end

# source://gepub//lib/gepub/dsl_util.rb#3
GEPUB::DSLUtil::UNASSIGNED = T.let(T.unsafe(nil), Object)

# source://gepub//lib/gepub/datemeta.rb#5
class GEPUB::DateMeta < ::GEPUB::Meta
  # @return [DateMeta] a new instance of DateMeta
  #
  # source://gepub//lib/gepub/datemeta.rb#6
  def initialize(name, content, parent, attributes = T.unsafe(nil), refiners = T.unsafe(nil)); end

  # source://gepub//lib/gepub/datemeta.rb#13
  def content=(date); end

  # source://gepub//lib/gepub/datemeta.rb#20
  def to_s(_locale = T.unsafe(nil)); end
end

# source://gepub//lib/gepub/inspect_mixin.rb#2
module GEPUB::InspectMixin
  # source://gepub//lib/gepub/inspect_mixin.rb#3
  def inspect; end
end

# an Object to hold metadata and content of item in manifest.
#
# following methods are created dynamically.
# #id, #id=, #set_id, #href, #href=, #set_href, #media_type, #media_type=, #set_media_type,
# #fallback, #fallback=, #set_fallback, #media_overlay, #media_overlay=, #set_media_overlay
#
# source://gepub//lib/gepub/item.rb#8
class GEPUB::Item
  include ::GEPUB::InspectMixin

  # create Item.
  #
  # if mediatype is not specified, it will be guessed from extension name.
  # Item can't guess media type for videos and  audios, so you should specify one.
  #
  # @return [Item] a new instance of Item
  #
  # source://gepub//lib/gepub/item.rb#23
  def initialize(itemid, itemhref, itemmediatype = T.unsafe(nil), parent = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # get +attribute+
  #
  # source://gepub//lib/gepub/item.rb#52
  def [](attribute); end

  # set +attribute+
  #
  # source://gepub//lib/gepub/item.rb#57
  def []=(attribute, value); end

  # add content from io or file to the item
  #
  # source://gepub//lib/gepub/item.rb#146
  def add_content(io_or_filename); end

  # source://gepub//lib/gepub/item.rb#157
  def add_content_io(io); end

  # add value to properties attribute.
  #
  # source://gepub//lib/gepub/item.rb#62
  def add_property(property); end

  # add content data to the item.
  #
  # source://gepub//lib/gepub/item.rb#136
  def add_raw_content(data); end

  # Returns the value of attribute content.
  #
  # source://gepub//lib/gepub/item.rb#11
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://gepub//lib/gepub/item.rb#11
  def content=(_arg0); end

  # set 'cover-image' property to the Item.
  # On generating EPUB, EPUB2-style cover image meta item will be added.
  #
  # source://gepub//lib/gepub/item.rb#69
  def cover_image; end

  # source://gepub//lib/gepub/item.rb#38
  def fallback; end

  # source://gepub//lib/gepub/item.rb#36
  def fallback=(val); end

  # guess and set content property from contents.
  #
  # source://gepub//lib/gepub/item.rb#102
  def guess_content_property; end

  # source://gepub//lib/gepub/item.rb#38
  def href; end

  # source://gepub//lib/gepub/item.rb#36
  def href=(val); end

  # source://gepub//lib/gepub/item.rb#38
  def id; end

  # source://gepub//lib/gepub/item.rb#36
  def id=(val); end

  # set bindings: item is a handler for media_type
  #
  # source://gepub//lib/gepub/item.rb#91
  def is_handler_of(media_type); end

  # get item's id
  #
  # source://gepub//lib/gepub/item.rb#42
  def itemid; end

  # source://gepub//lib/gepub/item.rb#96
  def landmark(type:, title:, id: T.unsafe(nil)); end

  # source://gepub//lib/gepub/item.rb#38
  def media_overlay; end

  # source://gepub//lib/gepub/item.rb#36
  def media_overlay=(val); end

  # source://gepub//lib/gepub/item.rb#38
  def media_type; end

  # source://gepub//lib/gepub/item.rb#36
  def media_type=(val); end

  # get mediatype of the item.
  #
  # source://gepub//lib/gepub/item.rb#47
  def mediatype; end

  # set 'nav' property to the Item.
  #
  # source://gepub//lib/gepub/item.rb#74
  def nav; end

  # source://gepub//lib/gepub/item.rb#38
  def properties; end

  # source://gepub//lib/gepub/item.rb#36
  def properties=(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_fallback(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_href(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_id(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_media_overlay(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_media_type(val); end

  # source://gepub//lib/gepub/item.rb#37
  def set_properties(val); end

  # generate xml to supplied Nokogiri builder.
  #
  # source://gepub//lib/gepub/item.rb#168
  def to_xml(builder, opf_version = T.unsafe(nil)); end

  # set toc text to the item
  #
  # source://gepub//lib/gepub/item.rb#79
  def toc_text(text); end

  # set toc text with id to the item
  #
  # source://gepub//lib/gepub/item.rb#85
  def toc_text_with_id(text, toc_id); end

  class << self
    # source://gepub//lib/gepub/item.rb#12
    def create(parent, attributes = T.unsafe(nil)); end
  end
end

# source://gepub//lib/gepub/item.rb#34
GEPUB::Item::ATTRIBUTES = T.let(T.unsafe(nil), Array)

# source://gepub//lib/gepub/manifest.rb#4
class GEPUB::Manifest
  include ::GEPUB::XMLUtil
  include ::GEPUB::InspectMixin

  # @return [Manifest] a new instance of Manifest
  # @yield [_self]
  # @yieldparam _self [GEPUB::Manifest] the object that the method was called on
  #
  # source://gepub//lib/gepub/manifest.rb#36
  def initialize(opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end

  # source://gepub//lib/gepub/manifest.rb#57
  def add_item(id, href, media_type, attributes = T.unsafe(nil)); end

  # source://gepub//lib/gepub/manifest.rb#32
  def id; end

  # source://gepub//lib/gepub/manifest.rb#28
  def id=(val); end

  # source://gepub//lib/gepub/manifest.rb#53
  def item_by_href(href); end

  # source://gepub//lib/gepub/manifest.rb#45
  def item_list; end

  # source://gepub//lib/gepub/manifest.rb#49
  def items; end

  # Returns the value of attribute opf_version.
  #
  # source://gepub//lib/gepub/manifest.rb#8
  def opf_version; end

  # Sets the attribute opf_version
  #
  # @param value the value to set the attribute opf_version to.
  #
  # source://gepub//lib/gepub/manifest.rb#8
  def opf_version=(_arg0); end

  # source://gepub//lib/gepub/manifest.rb#73
  def register_item(item); end

  # source://gepub//lib/gepub/manifest.rb#64
  def to_xml(builder); end

  # source://gepub//lib/gepub/manifest.rb#78
  def unregister_item(item); end

  class << self
    # source://gepub//lib/gepub/manifest.rb#9
    def parse(manifest_xml, opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end
  end
end

# Holds one metadata with refine meta elements.
#
# source://gepub//lib/gepub/meta.rb#6
class GEPUB::Meta
  include ::GEPUB::DSLUtil

  # @return [Meta] a new instance of Meta
  #
  # source://gepub//lib/gepub/meta.rb#10
  def initialize(name, content, parent, attributes = T.unsafe(nil), refiners = T.unsafe(nil)); end

  # get +attribute+
  #
  # source://gepub//lib/gepub/meta.rb#20
  def [](attribute); end

  # set +attribute+
  #
  # source://gepub//lib/gepub/meta.rb#25
  def []=(attribute, value); end

  # add alternate script refiner.
  #
  # source://gepub//lib/gepub/meta.rb#97
  def add_alternates(alternates = T.unsafe(nil)); end

  # add a refiner.
  #
  # source://gepub//lib/gepub/meta.rb#53
  def add_refiner(property, content, attributes = T.unsafe(nil)); end

  # Returns the value of attribute content.
  #
  # source://gepub//lib/gepub/meta.rb#8
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://gepub//lib/gepub/meta.rb#8
  def content=(_arg0); end

  # source://gepub//lib/gepub/meta.rb#75
  def display_seq(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def display_seq=(val); end

  # source://gepub//lib/gepub/meta.rb#75
  def file_as(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def file_as=(val); end

  # source://gepub//lib/gepub/meta.rb#75
  def group_position(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def group_position=(val); end

  # source://gepub//lib/gepub/meta.rb#75
  def identifier_type(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def identifier_type=(val); end

  # source://gepub//lib/gepub/meta.rb#88
  def lang(lang = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#84
  def lang=(lang); end

  # source://gepub//lib/gepub/meta.rb#105
  def list_alternates; end

  # Returns the value of attribute name.
  #
  # source://gepub//lib/gepub/meta.rb#9
  def name; end

  # set a 'unique' refiner. all other refiners with same property will be removed.
  #
  # source://gepub//lib/gepub/meta.rb#59
  def refine(property, content, attributes = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#43
  def refiner(name); end

  # source://gepub//lib/gepub/meta.rb#33
  def refiner_clear(name); end

  # source://gepub//lib/gepub/meta.rb#29
  def refiner_list(name); end

  # source://gepub//lib/gepub/meta.rb#75
  def role(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def role=(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_display_seq(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_file_as(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_group_position(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_identifier_type(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_role(val); end

  # source://gepub//lib/gepub/meta.rb#71
  def set_title_type(val); end

  # source://gepub//lib/gepub/meta.rb#75
  def title_type(value = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#70
  def title_type=(val); end

  # source://gepub//lib/gepub/meta.rb#140
  def to_s(locale = T.unsafe(nil)); end

  # source://gepub//lib/gepub/meta.rb#113
  def to_xml(builder, id_pool, ns = T.unsafe(nil), additional_attr = T.unsafe(nil), opf_version = T.unsafe(nil)); end
end

# source://gepub//lib/gepub/meta.rb#67
GEPUB::Meta::REFINERS = T.let(T.unsafe(nil), Array)

# Holds data in /package/metadata
#
# source://gepub//lib/gepub/metadata.rb#14
class GEPUB::Metadata
  include ::GEPUB::DSLUtil
  include ::GEPUB::XMLUtil
  include ::GEPUB::InspectMixin

  # @return [Metadata] a new instance of Metadata
  # @yield [_self]
  # @yieldparam _self [GEPUB::Metadata] the object that the method was called on
  #
  # source://gepub//lib/gepub/metadata.rb#63
  def initialize(opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end

  # @yield [meta]
  #
  # source://gepub//lib/gepub/metadata_add.rb#106
  def add_contributor(content, deprecated_id = T.unsafe(nil), deprecated_role = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_coverage(content, id); end

  # @yield [meta]
  #
  # source://gepub//lib/gepub/metadata_add.rb#87
  def add_creator(content, deprecated_id = T.unsafe(nil), deprecated_role = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata.rb#167
  def add_date(date, deprecated_id = T.unsafe(nil), id: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_description(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_format(content, id); end

  # source://gepub//lib/gepub/metadata.rb#159
  def add_identifier(string, id = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_language(content, id); end

  # @yield [meta]
  #
  # source://gepub//lib/gepub/metadata_add.rb#124
  def add_metadata(name, content, id: T.unsafe(nil), itemclass: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata.rb#183
  def add_metadata_internal(name, content, id: T.unsafe(nil), itemclass: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata.rb#223
  def add_oldstyle_meta(content, attributes = T.unsafe(nil)); end

  # @yield [meta]
  #
  # source://gepub//lib/gepub/metadata_add.rb#69
  def add_person(name, content, deprecated_id = T.unsafe(nil), deprecated_role = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_publisher(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_relation(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_rights(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_source(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_subject(content, id); end

  # @yield [meta]
  #
  # source://gepub//lib/gepub/metadata_add.rb#51
  def add_title(content, deprecated_id = T.unsafe(nil), deprecated_title_type = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#45
  def add_type(content, id); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def contributor(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def contributor=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def contributor_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def contributor_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def coverage(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def coverage=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def coverage_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def coverage_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def creator(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def creator=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def creator_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def creator_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def date(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def date=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def date_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def date_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def description(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def description=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def description_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def description_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def format(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def format=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def format_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def format_list; end

  # source://gepub//lib/gepub/metadata.rb#153
  def get_first_node(node); end

  # source://gepub//lib/gepub/metadata.rb#281
  def ibooks_scroll_axis; end

  # source://gepub//lib/gepub/metadata.rb#285
  def ibooks_scroll_axis=(val); end

  # source://gepub//lib/gepub/metadata.rb#272
  def ibooks_version; end

  # source://gepub//lib/gepub/metadata.rb#276
  def ibooks_version=(val); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/metadata.rb#297
  def ibooks_vocaburaly_specified?; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def identifier(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def identifier=(content); end

  # source://gepub//lib/gepub/metadata.rb#175
  def identifier_by_id(id); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def identifier_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def identifier_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def language(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def language=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def language_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def language_list; end

  # source://gepub//lib/gepub/metadata.rb#189
  def lastmodified(date = T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata.rb#214
  def lastmodified=(date); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/metadata.rb#83
  def lastmodified_updated?; end

  # should make it obsolete?
  #
  # source://gepub//lib/gepub/metadata.rb#104
  def main_title; end

  # source://gepub//lib/gepub/metadata.rb#124
  def meta_clear; end

  # source://gepub//lib/gepub/metadata.rb#120
  def meta_list; end

  # source://gepub//lib/gepub/metadata.rb#210
  def modified_now; end

  # source://gepub//lib/gepub/metadata.rb#108
  def oldstyle_meta; end

  # source://gepub//lib/gepub/metadata.rb#112
  def oldstyle_meta_clear; end

  # Returns the value of attribute opf_version.
  #
  # source://gepub//lib/gepub/metadata.rb#23
  def opf_version; end

  # Sets the attribute opf_version
  #
  # @param value the value to set the attribute opf_version to.
  #
  # source://gepub//lib/gepub/metadata.rb#23
  def opf_version=(_arg0); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def publisher(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def publisher=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def publisher_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def publisher_list; end

  # source://gepub//lib/gepub/metadata.rb#230
  def register_meta(meta); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def relation(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def relation=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def relation_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def relation_list; end

  # source://gepub//lib/gepub/metadata.rb#245
  def rendition_layout; end

  # source://gepub//lib/gepub/metadata.rb#249
  def rendition_layout=(val); end

  # source://gepub//lib/gepub/metadata.rb#254
  def rendition_orientation; end

  # source://gepub//lib/gepub/metadata.rb#258
  def rendition_orientation=(val); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/metadata.rb#293
  def rendition_specified?; end

  # source://gepub//lib/gepub/metadata.rb#263
  def rendition_spread; end

  # source://gepub//lib/gepub/metadata.rb#267
  def rendition_spread=(val); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def rights(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def rights=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def rights_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def rights_list; end

  # source://gepub//lib/gepub/metadata.rb#218
  def set_lastmodified(date = T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def source(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def source=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def source_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def source_list; end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def subject(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def subject=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def subject_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def subject_list; end

  # source://gepub//lib/gepub/metadata.rb#135
  def title(content = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata.rb#131
  def title=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def title_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def title_list; end

  # source://gepub//lib/gepub/metadata.rb#87
  def to_xml(builder); end

  # source://gepub//lib/gepub/metadata_add.rb#19
  def type(content = T.unsafe(nil), deprecated_id = T.unsafe(nil), id: T.unsafe(nil), title_type: T.unsafe(nil), identifier_type: T.unsafe(nil), display_seq: T.unsafe(nil), file_as: T.unsafe(nil), group_position: T.unsafe(nil), role: T.unsafe(nil), lang: T.unsafe(nil), alternates: T.unsafe(nil)); end

  # source://gepub//lib/gepub/metadata_add.rb#32
  def type=(content); end

  # source://gepub//lib/gepub/metadata_add.rb#8
  def type_clear; end

  # source://gepub//lib/gepub/metadata_add.rb#7
  def type_list; end

  # source://gepub//lib/gepub/metadata.rb#238
  def unregister_meta(meta); end

  private

  # source://gepub//lib/gepub/metadata.rb#313
  def collect_refiners(id); end

  # source://gepub//lib/gepub/metadata.rb#309
  def create_meta(node); end

  # source://gepub//lib/gepub/metadata.rb#302
  def parse_node(ns, node); end

  # source://gepub//lib/gepub/metadata.rb#324
  def parse_opf2_meta; end

  class << self
    # parse metadata element. metadata_xml should be Nokogiri::XML::Node object.
    #
    # source://gepub//lib/gepub/metadata.rb#25
    def parse(metadata_xml, opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end
  end
end

# source://gepub//lib/gepub/metadata_add.rb#5
GEPUB::Metadata::CONTENT_NODE_LIST = T.let(T.unsafe(nil), Array)

# source://gepub//lib/gepub/metadata.rb#15
class GEPUB::Metadata::NilContent
  class << self
    # source://gepub//lib/gepub/metadata.rb#16
    def content; end
  end
end

# Static Object to hold and operate with OEBPS data MIME types
#
# source://gepub//lib/gepub/mime.rb#6
class GEPUB::Mime
  class << self
    # add new mediatype to @@mediatypes
    #
    # source://gepub//lib/gepub/mime.rb#37
    def add_mimetype(mediatypes); end

    # compile mime_types regexp
    #
    # source://gepub//lib/gepub/mime.rb#9
    def compile_mime_types; end

    # guess mediatype by mime type mask
    #
    # source://gepub//lib/gepub/mime.rb#43
    def guess_mediatype(href); end

    # return mime media types => mime types hash
    #
    # source://gepub//lib/gepub/mime.rb#32
    def mime_types; end
  end
end

# Holds data in opf file.
#
# source://gepub//lib/gepub/package.rb#7
class GEPUB::Package
  include ::GEPUB::DSLUtil
  include ::GEPUB::XMLUtil
  include ::GEPUB::InspectMixin
  extend ::Forwardable

  # @return [Package] a new instance of Package
  # @yield [_self]
  # @yieldparam _self [GEPUB::Package] the object that the method was called on
  #
  # source://gepub//lib/gepub/package.rb#108
  def initialize(path = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # get +attribute+
  #
  # source://gepub//lib/gepub/package.rb#148
  def [](attribute); end

  # set +attribute+
  #
  # source://gepub//lib/gepub/package.rb#153
  def []=(attribute, value); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_contributor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_coverage(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_creator(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_date(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_description(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_format(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_identifier(*args, **_arg1, &block); end

  # @yield [item]
  #
  # source://gepub//lib/gepub/package.rb#174
  def add_item(href, content: T.unsafe(nil), id: T.unsafe(nil), attributes: T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_language(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#189
  def add_ordered_item(href, content: T.unsafe(nil), id: T.unsafe(nil), attributes: T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_publisher(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_relation(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_rights(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_source(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_subject(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_title(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def add_type(*args, **_arg1, &block); end

  # Returns the value of attribute bindings.
  #
  # source://gepub//lib/gepub/package.rb#12
  def bindings; end

  # Sets the attribute bindings
  #
  # @param value the value to set the attribute bindings to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def bindings=(_arg0); end

  # Returns the value of attribute contents_prefix.
  #
  # source://gepub//lib/gepub/package.rb#12
  def contents_prefix; end

  # Sets the attribute contents_prefix
  #
  # @param value the value to set the attribute contents_prefix to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def contents_prefix=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def contributor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def contributor=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def contributor_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def coverage(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def coverage=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def coverage_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def creator(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def creator=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def creator_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def date(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def date=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def date_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def description(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def description=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def description_list(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#138
  def dir(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#133
  def dir=(val); end

  # source://gepub//lib/gepub/package.rb#238
  def enable_ibooks_vocabulary; end

  # source://gepub//lib/gepub/package.rb#230
  def enable_rendition; end

  # Returns the value of attribute epub_backward_compat.
  #
  # source://gepub//lib/gepub/package.rb#12
  def epub_backward_compat; end

  # Sets the attribute epub_backward_compat
  #
  # @param value the value to set the attribute epub_backward_compat to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def epub_backward_compat=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def format(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def format=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def format_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ibooks_scroll_axis(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ibooks_scroll_axis=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ibooks_version(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def ibooks_version=(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/package.rb#242
  def ibooks_vocabulary_enabled?; end

  # source://gepub//lib/gepub/package.rb#138
  def id(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#133
  def id=(val); end

  # source://gepub//lib/gepub/package.rb#157
  def identifier(identifier = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#165
  def identifier=(identifier); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def identifier_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def item_by_href(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#203
  def items; end

  # source://gepub//lib/gepub/package.rb#138
  def lang(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#133
  def lang=(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def language(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def language=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def language_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def lastmodified(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def lastmodified=(*args, **_arg1, &block); end

  # Returns the value of attribute manifest.
  #
  # source://gepub//lib/gepub/package.rb#12
  def manifest; end

  # Sets the attribute manifest
  #
  # @param value the value to set the attribute manifest to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def manifest=(_arg0); end

  # Returns the value of attribute metadata.
  #
  # source://gepub//lib/gepub/package.rb#12
  def metadata; end

  # Sets the attribute metadata
  #
  # @param value the value to set the attribute metadata to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def metadata=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def modified_now(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#246
  def opf_xml; end

  # source://gepub//lib/gepub/package.rb#182
  def ordered; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def page_progression_direction(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def page_progression_direction=(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#84
  def parse_prefixes(prefix); end

  # Returns the value of attribute path.
  #
  # source://gepub//lib/gepub/package.rb#12
  def path; end

  # Sets the attribute path
  #
  # @param value the value to set the attribute path to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def path=(_arg0); end

  # source://gepub//lib/gepub/package.rb#138
  def prefix(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#133
  def prefix=(val); end

  # Returns the value of attribute prefixes.
  #
  # source://gepub//lib/gepub/package.rb#12
  def prefixes; end

  # Sets the attribute prefixes
  #
  # @param value the value to set the attribute prefixes to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def prefixes=(_arg0); end

  # source://gepub//lib/gepub/package.rb#169
  def primary_identifier(identifier, id = T.unsafe(nil), type = T.unsafe(nil)); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def publisher(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def publisher=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def publisher_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def relation(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def relation=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def relation_list(*args, **_arg1, &block); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/package.rb#234
  def rendition_enabled?; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_layout(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_layout=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_orientation(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_orientation=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_spread(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rendition_spread=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rights(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rights=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def rights_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_contributor(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_coverage(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_creator(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_date(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_description(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#134
  def set_dir(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_format(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#134
  def set_id(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_identifier(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#134
  def set_lang(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_language(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_lastmodified(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#134
  def set_prefix(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_publisher(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_relation(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_rights(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_source(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_subject(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_title(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def set_type(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#134
  def set_unique_identifier(val); end

  # source://gepub//lib/gepub/package.rb#218
  def set_version(val); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def source(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def source=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def source_list(*args, **_arg1, &block); end

  # Returns the value of attribute spine.
  #
  # source://gepub//lib/gepub/package.rb#12
  def spine; end

  # Sets the attribute spine
  #
  # @param value the value to set the attribute spine to.
  #
  # source://gepub//lib/gepub/package.rb#12
  def spine=(_arg0); end

  # source://gepub//lib/gepub/package.rb#196
  def spine_items; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def subject(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def subject=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def subject_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def title(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def title=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def title_list(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def type(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def type=(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def type_list(*args, **_arg1, &block); end

  # source://gepub//lib/gepub/package.rb#138
  def unique_identifier(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#133
  def unique_identifier=(val); end

  # source://gepub//lib/gepub/package.rb#207
  def version(val = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#226
  def version=(val); end

  class << self
    # parse OPF data. opf should be io or string object.
    #
    # source://gepub//lib/gepub/package.rb#91
    def parse_opf(opf, path); end
  end
end

# source://gepub//lib/gepub/package.rb#41
class GEPUB::Package::IDPool
  # @return [IDPool] a new instance of IDPool
  #
  # source://gepub//lib/gepub/package.rb#42
  def initialize; end

  # source://gepub//lib/gepub/package.rb#76
  def [](k); end

  # source://gepub//lib/gepub/package.rb#79
  def []=(k, v); end

  # source://gepub//lib/gepub/package.rb#47
  def counter(prefix, suffix); end

  # source://gepub//lib/gepub/package.rb#55
  def generate_key(param = T.unsafe(nil)); end

  # source://gepub//lib/gepub/package.rb#51
  def set_counter(prefix, suffix, val); end
end

# source://gepub//lib/gepub/resource_builder.rb#2
class GEPUB::ResourceBuilder
  include ::GEPUB::BuilderMixin

  # @return [ResourceBuilder] a new instance of ResourceBuilder
  #
  # source://gepub//lib/gepub/resource_builder.rb#23
  def initialize(book, attributes = T.unsafe(nil), &block); end

  # source://gepub//lib/gepub/resource_builder.rb#121
  def add_resource_dir(name); end

  # source://gepub//lib/gepub/resource_builder.rb#125
  def add_resource_dirs(dirs); end

  # source://gepub//lib/gepub/resource_builder.rb#132
  def cover_image(val); end

  # source://gepub//lib/gepub/resource_builder.rb#182
  def fallback_chain_files(*arg); end

  # source://gepub//lib/gepub/resource_builder.rb#159
  def fallback_group; end

  # source://gepub//lib/gepub/resource_builder.rb#44
  def file(val); end

  # source://gepub//lib/gepub/resource_builder.rb#58
  def files(*arg); end

  # source://gepub//lib/gepub/resource_builder.rb#108
  def glob(arg); end

  # source://gepub//lib/gepub/resource_builder.rb#193
  def handles(media_type); end

  # source://gepub//lib/gepub/resource_builder.rb#142
  def heading(text, id = T.unsafe(nil)); end

  # source://gepub//lib/gepub/resource_builder.rb#146
  def id(the_id); end

  # source://gepub//lib/gepub/resource_builder.rb#112
  def import(conf, args = T.unsafe(nil)); end

  # source://gepub//lib/gepub/resource_builder.rb#102
  def linear(val); end

  # source://gepub//lib/gepub/resource_builder.rb#137
  def nav(val); end

  # source://gepub//lib/gepub/resource_builder.rb#38
  def ordered(&block); end

  # source://gepub//lib/gepub/resource_builder.rb#74
  def page_spread_left; end

  # source://gepub//lib/gepub/resource_builder.rb#80
  def page_spread_right; end

  # source://gepub//lib/gepub/resource_builder.rb#86
  def rendition_layout(val); end

  # source://gepub//lib/gepub/resource_builder.rb#91
  def rendition_orientation(val); end

  # source://gepub//lib/gepub/resource_builder.rb#96
  def rendition_spread(val); end

  # source://gepub//lib/gepub/resource_builder.rb#150
  def with_media_type(*type); end

  private

  # source://gepub//lib/gepub/resource_builder.rb#199
  def create_one_file(val); end
end

# source://gepub//lib/gepub/resource_builder.rb#4
class GEPUB::ResourceBuilder::ResourceItem
  # @return [ResourceItem] a new instance of ResourceItem
  #
  # source://gepub//lib/gepub/resource_builder.rb#6
  def initialize(item); end

  # source://gepub//lib/gepub/resource_builder.rb#10
  def apply_one_to_multi; end

  # Returns the value of attribute item.
  #
  # source://gepub//lib/gepub/resource_builder.rb#5
  def item; end

  # source://gepub//lib/gepub/resource_builder.rb#14
  def media_type(val); end

  # source://gepub//lib/gepub/resource_builder.rb#18
  def method_missing(name, *args, &block); end
end

# source://gepub//lib/gepub/spine.rb#4
class GEPUB::Spine
  include ::GEPUB::XMLUtil
  include ::GEPUB::InspectMixin

  # @return [Spine] a new instance of Spine
  # @yield [_self]
  # @yieldparam _self [GEPUB::Spine] the object that the method was called on
  #
  # source://gepub//lib/gepub/spine.rb#106
  def initialize(opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end

  # source://gepub//lib/gepub/spine.rb#136
  def <<(item); end

  # source://gepub//lib/gepub/spine.rb#119
  def id; end

  # source://gepub//lib/gepub/spine.rb#117
  def id=(val); end

  # source://gepub//lib/gepub/spine.rb#126
  def itemref_by_id; end

  # source://gepub//lib/gepub/spine.rb#122
  def itemref_list; end

  # Returns the value of attribute opf_version.
  #
  # source://gepub//lib/gepub/spine.rb#8
  def opf_version; end

  # Sets the attribute opf_version
  #
  # @param value the value to set the attribute opf_version to.
  #
  # source://gepub//lib/gepub/spine.rb#8
  def opf_version=(_arg0); end

  # source://gepub//lib/gepub/spine.rb#119
  def page_progression_direction; end

  # source://gepub//lib/gepub/spine.rb#117
  def page_progression_direction=(val); end

  # source://gepub//lib/gepub/spine.rb#130
  def push(item); end

  # source://gepub//lib/gepub/spine.rb#153
  def register_itemref(itemref); end

  # source://gepub//lib/gepub/spine.rb#163
  def remove_with_idlist(ids); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/spine.rb#140
  def rendition_specified?; end

  # source://gepub//lib/gepub/spine.rb#118
  def set_id(val); end

  # source://gepub//lib/gepub/spine.rb#118
  def set_page_progression_direction(val); end

  # source://gepub//lib/gepub/spine.rb#118
  def set_toc(val); end

  # source://gepub//lib/gepub/spine.rb#144
  def to_xml(builder); end

  # source://gepub//lib/gepub/spine.rb#119
  def toc; end

  # source://gepub//lib/gepub/spine.rb#117
  def toc=(val); end

  # source://gepub//lib/gepub/spine.rb#158
  def unregister_itemref(itemref); end

  class << self
    # source://gepub//lib/gepub/spine.rb#89
    def parse(spine_xml, opf_version = T.unsafe(nil), id_pool = T.unsafe(nil)); end
  end
end

# source://gepub//lib/gepub/spine.rb#9
class GEPUB::Spine::Itemref
  # @return [Itemref] a new instance of Itemref
  #
  # source://gepub//lib/gepub/spine.rb#14
  def initialize(idref, parent = T.unsafe(nil), attributes = T.unsafe(nil)); end

  # get +attribute+
  #
  # source://gepub//lib/gepub/spine.rb#32
  def [](attribute); end

  # set +attribute+
  #
  # source://gepub//lib/gepub/spine.rb#37
  def []=(attribute, value); end

  # source://gepub//lib/gepub/spine.rb#41
  def add_property(property); end

  # source://gepub//lib/gepub/spine.rb#28
  def id; end

  # source://gepub//lib/gepub/spine.rb#26
  def id=(val); end

  # source://gepub//lib/gepub/spine.rb#28
  def idref; end

  # source://gepub//lib/gepub/spine.rb#26
  def idref=(val); end

  # source://gepub//lib/gepub/spine.rb#28
  def linear; end

  # source://gepub//lib/gepub/spine.rb#26
  def linear=(val); end

  # source://gepub//lib/gepub/spine.rb#49
  def page_spread_left; end

  # source://gepub//lib/gepub/spine.rb#45
  def page_spread_right; end

  # source://gepub//lib/gepub/spine.rb#28
  def properties; end

  # source://gepub//lib/gepub/spine.rb#26
  def properties=(val); end

  # source://gepub//lib/gepub/spine.rb#62
  def rendition_layout=(val); end

  # source://gepub//lib/gepub/spine.rb#66
  def rendition_orientation=(val); end

  # @return [Boolean]
  #
  # source://gepub//lib/gepub/spine.rb#53
  def rendition_specified?; end

  # source://gepub//lib/gepub/spine.rb#70
  def rendition_spread=(val); end

  # source://gepub//lib/gepub/spine.rb#27
  def set_id(val); end

  # source://gepub//lib/gepub/spine.rb#27
  def set_idref(val); end

  # source://gepub//lib/gepub/spine.rb#27
  def set_linear(val); end

  # source://gepub//lib/gepub/spine.rb#27
  def set_properties(val); end

  # source://gepub//lib/gepub/spine.rb#57
  def set_rendition_param(name, val); end

  # source://gepub//lib/gepub/spine.rb#74
  def to_xml(builder, opf_version); end

  class << self
    # source://gepub//lib/gepub/spine.rb#10
    def create(parent, attributes = T.unsafe(nil)); end
  end
end

# metadata constants
#
# source://gepub//lib/gepub/metadata.rb#7
module GEPUB::TITLE_TYPE; end

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::COLLECTION = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::EDITION = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::EXPANDED = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::MAIN = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::SHORT = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#10
GEPUB::TITLE_TYPE::SUBTITLE = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/metadata.rb#8
GEPUB::TITLE_TYPE::TYPES = T.let(T.unsafe(nil), Array)

# GEPUB gem version
#
# source://gepub//lib/gepub/version.rb#3
GEPUB::VERSION = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/xml_util.rb#2
module GEPUB::XMLUtil
  # source://gepub//lib/gepub/xml_util.rb#14
  def attr_to_hash(nokogiri_attrs); end

  # source://gepub//lib/gepub/xml_util.rb#5
  def ns_prefix(ns); end

  # source://gepub//lib/gepub/xml_util.rb#10
  def raw_prefix(ns); end
end

# source://gepub//lib/gepub/xml_util.rb#4
GEPUB::XMLUtil::DC_NS = T.let(T.unsafe(nil), String)

# source://gepub//lib/gepub/xml_util.rb#3
GEPUB::XMLUtil::OPF_NS = T.let(T.unsafe(nil), String)
